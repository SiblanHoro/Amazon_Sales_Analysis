Create Database Amazon_Sales

USE Amazon_Sales

Select * from Amazon

SELECT COUNT(*) FROM Amazon

---Q. What are the distinct cities present in the dataset

SELECT DISTINCT City FROM Amazon 

---Q Count how many sales transaction were made in each branch

SELECT Branch,
       COUNT(*) AS Total_trans
FROM Amazon
GROUP BY Branch

---Q. Show all transactions done by 'Female" customer

SELECT COUNT(*) FROM Amazon
WHERE Gender = 'Female'

---How many different product lines are their 

SELECT Product_line, COUNT(*) FROM Amazon 

---Tasks 1. Find the total revenue generated by each product line for each gender

SELECT Product_line,
       Gender,
	   SUM(Total) AS Total_revenue
FROM Amazon
GROUP BY Product_line, Gender

---Task 2. Identify the top 2 branches with the highest total gross income.

SELECT TOP 2 Branch,
      SUM(gross_income) AS Total_income
FROM Amazon 
GROUP BY Branch
ORDER BY Total_income DESC

---Task 3. Calculate the month over month change in revenue

WITH MonthlyRevenue AS (
           SELECT DATENAME(mm, Date) AS Months,
                  SUM(Total) AS Revenue
           FROM Amazon
           GROUP BY DATENAME(mm, Date)
           )
SELECT curr.Months,
       curr.Revenue,
	   prev.revenue AS Prev_Revenue,
	   curr.Revenue - Prev_Revenue AS Change
FROM MonthlyRevenue AS curr
LEFT JOIN MonthlyRevenue AS prev
   ON prev.Months = curr.Months

---Task 4. Generate A running total of revenue over time (based on the date column).

SELECT Date, 
       SUM(Total) OVER(ORDER BY Date) AS Running_Total
FROM Amazon

---Task 5. Calculate the percentage of total sales made using each payment method 

SELECT Payment,
       COUNT(*) AS transactions,
	   ROUND(100 * COUNT(*) / (SELECT COUNT(*) FROM Amazon), 2) AS Percentage
FROM Amazon
GROUP BY Payment;

---Task 6. List all transactions where the rating is heigher than the average rating across all transaction 

SELECT * 
FROM Amazon
WHERE Rating > (SELECT AVG(Rating) FROM Amazon) 

---Task 7. Find the best-performing product line in terms of revenue for each branch

SELECT B.Branch,
       B.Product_line,
	   B.Revenue
FROM (
    SELECT Branch,
           Product_line,
	       SUM(Total) AS Revenue
    FROM Amazon
    GROUP BY Branch, Product_line
) AS B
WHERE B.Revenue = (
    SELECT MAX(Revenue)
    FROM (
	   SELECT Branch,
	          Product_line,
			  SUM(Total) AS Revenue
	   FROM Amazon
	   GROUP BY Branch, Product_line
	) SUB
	WHERE SUB.Branch = B.Branch
)

---Task 8. For each city, identify the most frequent customer type 

WITH Ranked As(
SELECT City, 
       Customer_type,     
       RANK() OVER(PARTITION BY City ORDER BY COUNT(*) DESC) 
AS rnk
FROM Amazon
GROUP BY City, Customer_type
)
SELECT City, Customer_type
FROM Ranked 
WHERE rnk = 1

---Task 9. find the date with higest totol gross income

SELECT TOP 1
       SUM(Gross_income) AS Highest_gross_income,
	   Date
FROM Amazon
GROUP BY Date
ORDER BY Highest_gross_income DESC

---Task 10. For each product line, compare each unit price with the average unit price of that product line 

SELECT Invoice_ID,
       Product_line,
       Unit_price,
	   AVG(Unit_price) OVER(PARTITION BY Product_line) AS Avg_Unit_price,
	   Unit_price - AVG(Unit_price) OVER(PARTITION BY  Product_line) AS Diff
FROM Amazon
                             
---Task 11. Analyze the total income and number of transactions each customer type per branch.

SELECT Customer_type,
       Branch,
       SUM(gross_income) AS Income,
       COUNT(*) AS trans
FROM Amazon
GROUP BY Customer_type, Branch

---Task 12. Identify if there any duplicate invoice ids in the dataset 

SELECT Invoice_ID, 
       COUNT(Invoice_ID) AS Dup_Invoice
FROM Amazon
GROUP BY Invoice_ID
HAVING COUNT(Invoice_ID) > 1

---Task 13. Determine the top 3 dates with the most number of transations.

SELECT TOP 3 Date,
       COUNT(*) AS Num_of_trans
FROM Amazon
GROUP BY Date
ORDER BY Num_of_trans DESC;

-----Task 14. Show the cumulative quantity sold over time for each product line 

SELECT Product_line,
       Date,
	   Quantity,
	   SUM(Quantity) OVER(PARTITION BY Product_line ORDER BY Date ROWS UNBOUNDED PRECEDING) AS Cumulative_qty
FROM Amazon

---Task 15. Get the distribution of genders for each payment method.

SELECT Payment,
       Gender,
	   COUNT(*) AS Cnt
FROM Amazon
GROUP BY Payment, Gender

---Task 16. Find transaction where the total amount exceeds the 90 percentile of all transaction totals.

WITH T90 AS (
         SELECT PERCENTILE_CNT(0.9) WITHIN GROUP 
		 (ORDER BY Total) AS T90_val
		 FROM Amazon
		 )
SELECT A.*
FROM Amazon AS A 
CROSS JOIN T90
WHERE A.Total > T90_val

---Task 17. Identify all days where total sales were below the average daily sales 

SELECT Date,
       SUM(Total) AS Sales
FROM Amazon 
GROUP BY Date
HAVING SUM(Total) < (SELECT AVG(Total) FROM Amazon)

---Task 18. List all transactions that have the maximum quantity sold in a single transaction.

SELECT *
FROM Amazon
WHERE Quantity = (SELECT MAX(Quantity) FROM Amazon)

---Task 19. Calculate the average COGS per product line for each month

SELECT Product_line,
       DATENAME(mm, Date) AS Months,
	   AVG(Cogs) AS Avgcogs
FROM Amazon
GROUP BY DATENAME(mm, Date), product_line

---Task 20. Rank all cities based on their total revenue

SELECT City,
       SUM(Total) AS Revenue,
	   RANK() OVER(ORDER BY SUM(Total) DESC) AS Rnk
FROM Amazon
GROUP BY City
